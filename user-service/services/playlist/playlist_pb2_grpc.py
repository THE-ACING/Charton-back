# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from services.playlist import playlist_pb2 as services_dot_playlist_dot_playlist__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in services/playlist/playlist_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PlaylistStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPlaylist = channel.unary_unary(
                '/playlist.Playlist/GetPlaylist',
                request_serializer=services_dot_playlist_dot_playlist__pb2.PlaylistRequest.SerializeToString,
                response_deserializer=services_dot_playlist_dot_playlist__pb2.PlaylistTracksResponse.FromString,
                _registered_method=True)
        self.CreatePlaylist = channel.unary_unary(
                '/playlist.Playlist/CreatePlaylist',
                request_serializer=services_dot_playlist_dot_playlist__pb2.CreatePlaylistRequest.SerializeToString,
                response_deserializer=services_dot_playlist_dot_playlist__pb2.PlaylistResponse.FromString,
                _registered_method=True)
        self.UpdatePlaylist = channel.unary_unary(
                '/playlist.Playlist/UpdatePlaylist',
                request_serializer=services_dot_playlist_dot_playlist__pb2.UpdatePlaylistRequest.SerializeToString,
                response_deserializer=services_dot_playlist_dot_playlist__pb2.PlaylistResponse.FromString,
                _registered_method=True)
        self.RemovePlaylist = channel.unary_unary(
                '/playlist.Playlist/RemovePlaylist',
                request_serializer=services_dot_playlist_dot_playlist__pb2.PlaylistRequest.SerializeToString,
                response_deserializer=services_dot_playlist_dot_playlist__pb2.PlaylistResponse.FromString,
                _registered_method=True)
        self.AddTrackToPlaylist = channel.unary_unary(
                '/playlist.Playlist/AddTrackToPlaylist',
                request_serializer=services_dot_playlist_dot_playlist__pb2.AddTrackToPlaylistRequest.SerializeToString,
                response_deserializer=services_dot_playlist_dot_playlist__pb2.PlaylistResponse.FromString,
                _registered_method=True)
        self.RemoveTrackFromPlaylist = channel.unary_unary(
                '/playlist.Playlist/RemoveTrackFromPlaylist',
                request_serializer=services_dot_playlist_dot_playlist__pb2.AddTrackToPlaylistRequest.SerializeToString,
                response_deserializer=services_dot_playlist_dot_playlist__pb2.PlaylistResponse.FromString,
                _registered_method=True)
        self.GetPlaylists = channel.unary_unary(
                '/playlist.Playlist/GetPlaylists',
                request_serializer=services_dot_playlist_dot_playlist__pb2.PlaylistsRequest.SerializeToString,
                response_deserializer=services_dot_playlist_dot_playlist__pb2.PlaylistsResponse.FromString,
                _registered_method=True)
        self.GetUserPlaylists = channel.unary_unary(
                '/playlist.Playlist/GetUserPlaylists',
                request_serializer=services_dot_playlist_dot_playlist__pb2.UserPlaylistsRequest.SerializeToString,
                response_deserializer=services_dot_playlist_dot_playlist__pb2.PlaylistsResponse.FromString,
                _registered_method=True)


class PlaylistServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemovePlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTrackToPlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveTrackFromPlaylist(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPlaylists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserPlaylists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PlaylistServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlaylist,
                    request_deserializer=services_dot_playlist_dot_playlist__pb2.PlaylistRequest.FromString,
                    response_serializer=services_dot_playlist_dot_playlist__pb2.PlaylistTracksResponse.SerializeToString,
            ),
            'CreatePlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePlaylist,
                    request_deserializer=services_dot_playlist_dot_playlist__pb2.CreatePlaylistRequest.FromString,
                    response_serializer=services_dot_playlist_dot_playlist__pb2.PlaylistResponse.SerializeToString,
            ),
            'UpdatePlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePlaylist,
                    request_deserializer=services_dot_playlist_dot_playlist__pb2.UpdatePlaylistRequest.FromString,
                    response_serializer=services_dot_playlist_dot_playlist__pb2.PlaylistResponse.SerializeToString,
            ),
            'RemovePlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.RemovePlaylist,
                    request_deserializer=services_dot_playlist_dot_playlist__pb2.PlaylistRequest.FromString,
                    response_serializer=services_dot_playlist_dot_playlist__pb2.PlaylistResponse.SerializeToString,
            ),
            'AddTrackToPlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTrackToPlaylist,
                    request_deserializer=services_dot_playlist_dot_playlist__pb2.AddTrackToPlaylistRequest.FromString,
                    response_serializer=services_dot_playlist_dot_playlist__pb2.PlaylistResponse.SerializeToString,
            ),
            'RemoveTrackFromPlaylist': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveTrackFromPlaylist,
                    request_deserializer=services_dot_playlist_dot_playlist__pb2.AddTrackToPlaylistRequest.FromString,
                    response_serializer=services_dot_playlist_dot_playlist__pb2.PlaylistResponse.SerializeToString,
            ),
            'GetPlaylists': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlaylists,
                    request_deserializer=services_dot_playlist_dot_playlist__pb2.PlaylistsRequest.FromString,
                    response_serializer=services_dot_playlist_dot_playlist__pb2.PlaylistsResponse.SerializeToString,
            ),
            'GetUserPlaylists': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserPlaylists,
                    request_deserializer=services_dot_playlist_dot_playlist__pb2.UserPlaylistsRequest.FromString,
                    response_serializer=services_dot_playlist_dot_playlist__pb2.PlaylistsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'playlist.Playlist', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('playlist.Playlist', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Playlist(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/playlist.Playlist/GetPlaylist',
            services_dot_playlist_dot_playlist__pb2.PlaylistRequest.SerializeToString,
            services_dot_playlist_dot_playlist__pb2.PlaylistTracksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreatePlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/playlist.Playlist/CreatePlaylist',
            services_dot_playlist_dot_playlist__pb2.CreatePlaylistRequest.SerializeToString,
            services_dot_playlist_dot_playlist__pb2.PlaylistResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdatePlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/playlist.Playlist/UpdatePlaylist',
            services_dot_playlist_dot_playlist__pb2.UpdatePlaylistRequest.SerializeToString,
            services_dot_playlist_dot_playlist__pb2.PlaylistResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemovePlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/playlist.Playlist/RemovePlaylist',
            services_dot_playlist_dot_playlist__pb2.PlaylistRequest.SerializeToString,
            services_dot_playlist_dot_playlist__pb2.PlaylistResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddTrackToPlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/playlist.Playlist/AddTrackToPlaylist',
            services_dot_playlist_dot_playlist__pb2.AddTrackToPlaylistRequest.SerializeToString,
            services_dot_playlist_dot_playlist__pb2.PlaylistResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveTrackFromPlaylist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/playlist.Playlist/RemoveTrackFromPlaylist',
            services_dot_playlist_dot_playlist__pb2.AddTrackToPlaylistRequest.SerializeToString,
            services_dot_playlist_dot_playlist__pb2.PlaylistResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPlaylists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/playlist.Playlist/GetPlaylists',
            services_dot_playlist_dot_playlist__pb2.PlaylistsRequest.SerializeToString,
            services_dot_playlist_dot_playlist__pb2.PlaylistsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserPlaylists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/playlist.Playlist/GetUserPlaylists',
            services_dot_playlist_dot_playlist__pb2.UserPlaylistsRequest.SerializeToString,
            services_dot_playlist_dot_playlist__pb2.PlaylistsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
